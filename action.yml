name: 'Preview Pull Requests in Google Kubernetes Service for Moleculer App'
description: 'Deploy moleculer app preview of Pull Requests to GKE - Google Kubernetes Engine using Moleculer Helm charts ðŸš€'
author: 'Mahmoud Almasri'
inputs:
  HELM_RELEASE_NAME:
    required: false
    default: $(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr
    description: "Helm release name for the deployment"
  DOCKER_FILE:
    required: false
    default: "Dockerfile"
    description: "Dockerfile to build, tag with preview metadata and publish to container registry"
  DOCKER_REGISTRY:
    required: false
    default: "gcr.io"
    description: "Docker image registry. Defaults to GCP container registry"
  IMAGE_TAGS:
    required: false
    default: 'latest'	
    description: "Image tag"
  IMAGE_REPO_NAME:
    required: false
    default: exampleRepo
    description: >
      Image repository name in the container registery. P.S. in Google cloud image registary, the image repository name will be like: 
      gcr.io/[PROJECT_ID]/[IMAGE_REPO_NAME], so in this variable we define the last section of the full image name.
  CONTAINER_NAME:
    required: false
    default: myAppContainer
    description: >
      The container name that should deploy to the k8s cluster. In the K8S cluster the POD will start a container, 
      we define here the name of container that will start in the deployment.
  CRON_ENABLED:
    required: false
    default: false
    description: "The moleculer cron for helm chart."
  MOLECULER_APM_ENABLE:
    required: false
    default: 0
    description: "The moleculer lab for helm chart."
  TRANSPORTER:
    required: false
    default: "TCP"
    description: "The transporter for the moleculer APP"
  AGENT_TOKEN:
    required: false
    type: string
    default: somesecret
    description: "The moleculer lab agent token for the moleculer APP"
  AGENT_APIKEY:
    type: string
    required: false
    default: somesecret
    description: "The moleculer lab API key for the moleculer APP"
  SERVICES:
    type: string
    description: 'The name of the moleculer services you want to deploy, it  should between {}'
    required: false
    default: ''
  SERVICEDIR:
    type: string
    description: 'The name of the moleculer services directory'
    required: false
    default: 'build/services'
  MONGO_URI:
    description: 'The DB connection string'
    required: true
    default: ''
  HELM_SET:
    description: Additional helm values to set environment variables (corresponds to `helm upgrade --set`). Should have format environment.env.VAR1=VAL1,environment.env.VAR2=VAL2.
    required: false
    default: environment.env.LOGGER=Laboratory
  BASE_URL:
    description: >
      Let's assume that your app gateway URL is 'api.example.com', and you want to create a PR deployment using this action, so the deployment PR URL will be 'pr-[PR_NUMBER].[BASE_URL]' 
      (pr-1.api.example.com) 
    default: 'api.example.com'
    required: true
    type: string

  GCP_PROJECT:
    description: 'GCP Project ID'
    required: true
    default: 'example-project'
  GCP_JSON_KEY:
    description: 'GCP JSON KEY'
    required: true
  CLUSTER_NAME: 
    description: 'K8S cluster Name'
    required: true
    default: 'example-cluster'
  CLUSTER_LOCATION:
    description: 'K8S cluster location'
    required: true
    default: 'us-central-01'
  DNS_ZONE_NAME:
    description: "Your DNS Zone Name in GCP Cloud DNS,It's the cloud DNS Zone name not the DNS name (P.S. DNS name is example.com)"
    default: example-com
    required: true
  GITHUB_TOKEN:
    description: "Your Github token"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
    - id: login-docker 
      name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.DOCKER_REGISTRY }}
        username: _json_key
        password: ${{ inputs.GCP_JSON_KEY }}
    
    - id: docker-build-push
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ${{ inputs.GCP_PROJECT }}/${{ inputs.IMAGE_REPO_NAME }}
        tags: ${{ inputs.IMAGE_TAGS	}}
        registry: ${{ inputs.DOCKER_REGISTRY }}
        username: _json_key
        password:  ${{ inputs.GCP_JSON_KEY }}
    - id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_JSON_KEY }}
    - id: get-credentials
      uses: google-github-actions/get-gke-credentials@v0.3.0
      with:
        CLUSTER_NAME: ${{ inputs.CLUSTER_NAME }}
        location: ${{ inputs.CLUSTER_LOCATION }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.3.0

    - id: create-ip-address
      shell: bash
      run: |
        if ! [[ "${{ inputs.SERVICES }}" =~ "api"  || "${{ inputs.SERVICES }}" =~ "API" ]];then
          echo "You don't have API service, so you don't need to create an IP address."
        else
          if [[ -z $(gcloud compute addresses list --format json --filter "name=${{ inputs.HELM_RELEASE_NAME }}" --format="get(address)") ]];
          then
            gcloud compute addresses create ${{ inputs.HELM_RELEASE_NAME }} --global --ip-version IPV4
            echo "::set-output name=STATIC_IP_ADDRESS::$(gcloud compute addresses list --format json --filter "name=${{ inputs.HELM_RELEASE_NAME }}" --format="get(address)")"
          else
            echo "::set-output name=STATIC_IP_ADDRESS::$(gcloud compute addresses list --format json --filter "name=${{ inputs.HELM_RELEASE_NAME }}" --format="get(address)")"
          fi
        fi
    - id: create-dns
      shell: bash
      run: |
        if ! [[ "${{ inputs.SERVICES }}" =~ "api"  || "${{ inputs.SERVICES }}" =~ "API" ]];then
          echo "You don't have API service, so you don't need to create a DNS."
        else
          if gcloud dns record-sets create pr-${{github.event.number}}.${{ inputs.BASE_URL }}. --rrdatas=${{steps.create-ip-address.outputs.STATIC_IP_ADDRESS}} --type=A --ttl=60 --zone=${{ inputs.DNS_ZONE_NAME }}
          then
            echo "The DNS created"
          else
            echo "The DNS is already exist or failed to create."
          fi
        fi

    - id: deploy-helm
      shell: bash
      run: |
        name=${{ inputs.HELM_RELEASE_NAME }}
        helm repo add helm-charts https://knawat.github.io/helm-charts
        OUTPUT=$(helm upgrade ${{ inputs.HELM_RELEASE_NAME }} helm-charts/moleculer \
          --install \
          -n "${{ inputs.HELM_RELEASE_NAME }}" \
          --create-namespace \
          --set container.name="${{ inputs.CONTAINER_NAME }}" \
          --set ingress.annotations."kubernetes\.io/ingress\.global-static-ip-name"="${{ inputs.HELM_RELEASE_NAME }}"  --set container.services="{api,auth,categories,config,currencies,files,images,importer,oms,parser,products,suppliers,translator,warehouse,weight}" \
          --set image.repository="${{ inputs.DOCKER_REGISTRY }}/${{ inputs.GCP_PROJECT }}/${{ inputs.IMAGE_REPO_NAME }}" \
          --set image.tag="${{ inputs.IMAGE_TAGS	}}" \
          --set cron.enabled=${{ inputs.CRON_ENABLED	}} \
          --set-string environment.secret.MONGO_URI='${{ inputs.MONGO_URI }}' \
          --set environment.secret.AGENT_APIKEY=${{ inputs.AGENT_APIKEY }} \
          --set environment.secret.AGENT_TOKEN=${{ inputs.AGENT_TOKEN }} \
          --set environment.env.BASE_URL="pr-${{github.event.number}}.${{ inputs.BASE_URL }}" \
          --set environment.env.SERVICEDIR=${{ inputs.SERVICEDIR }} \
          --set environment.env.NAMESPACE="${{ inputs.HELM_RELEASE_NAME }}" \
          --set environment.env.TRANSPORTER=${{ inputs.TRANSPORTER	}} \
          --set environment.env.MOLECULER_APM_ENABLE=${{ inputs.MOLECULER_APM_ENABLE	}} \
          --set "${{ inputs.HELM_SET	}}" \
          --set ingress.hosts[0].host="pr-${{github.event.number}}.${{ inputs.BASE_URL }}" \
          --set ingress.hosts[0].paths[0].path="/*" \
          --set ingress.hosts[0].paths[0].backend.serviceName="api" \
          --set ingress.hosts[0].paths[0].backend.servicePort="80")
        OUTPUT="${OUTPUT//'%'/'%25'}"
        OUTPUT="${OUTPUT//$'\n'/'%0A'}"
        OUTPUT="${OUTPUT//$'\r'/'%0D'}"
        echo "::set-output name=helm-note::$OUTPUT"

    - id: get-lab-ip-address
      shell: bash
      run: |
        if [[ ${{ inputs.MOLECULER_APM_ENABLE }} == 1 &&  "${{ inputs.SERVICES }}" =~ "api" ]];then
          gcloud container clusters get-credentials ${{ inputs.CLUSTER_NAME }} --zone ${{ inputs.CLUSTER_LOCATION }} --project ${{ inputs.GCP_PROJECT }}
          echo "::set-output name=LAB_IP_ADDRESS::$(kubectl get service --field-selector="metadata.name=lab" -n ${{ inputs.HELM_RELEASE_NAME }}  --output jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}")"
        else
          echo "::set-output name=LAB_IP_ADDRESS::echo("You dont have Lab service enabled, or this is a dependecy deploy so, to get the lab IP go the the main PR.")"
        fi

    - uses: mshick/add-pr-comment@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        message: |
          ${{steps.deploy-helm.outputs.helm-note}}
          LAB_IP_ADDRESS: ${{steps.get-lab-ip-address.outputs.LAB_IP_ADDRESS}}
        allow-repeats: true
branding:
  icon: 'anchor'  
  color: 'orange'