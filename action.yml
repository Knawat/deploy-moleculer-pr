name: 'Preview Pull Requests in Google Kubernetes Service for Moleculer App'
description: 'A Github Action to deploy moleculer app preview of Pull Requests to GKE - Google Kubernetes Engine using Moleculer Helm charts ðŸš€'
author: 'Mahmoud Almasri'
inputs:
  docker-file:
    required: false
    default: "Dockerfile"
    description: "Dockerfile to build, tag with preview metadata and publish to container registry"
  docker-registry:
    required: false
    default: "gcr.io"
    description: "Docker container registry. Defaults to GCP container registry"
  IMAGE_TAGS:
    required: false
    default: 'latest'	
    description: "Image tag"
  IMAGE_REPO_NAME:
    required: false
    default: knawat
    description: "Image repo name in GCP image registery"
  CONTAINER_NAME:
    required: false
    default: app
    description: "The container name that should deploy to the k8s cluster"
  CRON_ENABLED:
    required: false
    default: false
    description: "The moleculer cron for helm chart."
  MOLECULER_APM_ENABLE:
    required: false
    default: "0"
    description: "The moleculer lab for helm chart."
  TRANSPORTER:
    required: false
    default: "TCP"
    description: "The transporter for the moleculer APP"
  AGENT_TOKEN:
    required: false
    type: string
    default: somesecret
    description: "The moleculer lab agent token for the moleculer APP"
  AGENT_APIKEY:
    type: string
    required: false
    default: somesecret
    description: "The moleculer lab API key for the moleculer APP"
  SERVICES:
    description: 'The name of the moleculer services you want to deploy, it  should between {}'
    required: false
    default: '{API, test}'
  HELM_SET:
    description: Additional helm values to set environment variables (corresponds to `helm upgrade --set`). Should have format environment.env.VAR1=VAL1,environment.env.VAR2=VAL2.
    required: false
  BASE_URL:
    description: "Your base URL for your deployment"
    default: 'x.knawat.com'
    required: false
    type: string

  GCP_PROJECT:
    description: 'GCP Project Name'
    required: true
    default: 'knawat'
  GCP_JSON_KEY:
    description: 'GCP JSON KEY'
    required: true
  cluster_name: 
    description: 'GCP cluster Name'
    required: true
    default: 'knawat'
  cluster_location:
    description: 'GCP cluster location'
    required: true
    default: 'knawat'
  DNS_ZONE_NAME:
    description: "Your DNS Zone Name in GCP Cloud DNS"
    default: knawat-com
    required: false
  GITHUB_TOKEN:
    description: "Your Github token"
    required: true

runs:
  using: "composite"
  steps:
    - id: login-docker 
      name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.docker-registry }}
        username: _json_key
        password: ${{ inputs.GCP_JSON_KEY }}
    
    - id: docker-build-push
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ${{ inputs.GCP_PROJECT }}/${{ inputs.IMAGE_REPO_NAME }}
        tags: ${{ inputs.IMAGE_TAGS	}}
        registry: ${{ inputs.docker-registry }}
        username: _json_key
        password:  ${{ inputs.GCP_JSON_KEY }}
    - id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_JSON_KEY }}
    - id: get-credentials
      uses: google-github-actions/get-gke-credentials@v0.3.0
      with:
        cluster_name: ${{ inputs.cluster_name }}
        location: ${{ inputs.cluster_location }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.3.0

    - id: create-ip-address
      shell: bash
      run: |
        if ! [[ "${{ inputs.SERVICES }}" =~ "api"  || "${{ inputs.SERVICES }}" =~ "API" ]];then
          echo "You don't have API service, so you don't need to create an IP address."
        else
          if [[ -z $(gcloud compute addresses list --format json --filter "name=$(echo $GITHUB_HEAD_REF | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr" --format="get(address)") ]];
          then
            gcloud compute addresses create $(echo $GITHUB_HEAD_REF | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr --global --ip-version IPV4
            echo "::set-output name=STATIC_IP_ADDRESS::$(gcloud compute addresses list --format json --filter "name=$(echo $GITHUB_HEAD_REF | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr" --format="get(address)")"
          else
            echo "::set-output name=STATIC_IP_ADDRESS::$(gcloud compute addresses list --format json --filter "name=$(echo $GITHUB_HEAD_REF | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr" --format="get(address)")"
          fi
        fi
    - id: create-dns
      shell: bash
      run: |
        if ! [[ "${{ inputs.SERVICES }}" =~ "api"  || "${{ inputs.SERVICES }}" =~ "API" ]];then
          echo "You don't have API service, so you don't need to create a DNS."
        else
          if gcloud dns record-sets create pr-${{github.event.number}}.${{ inputs.BASE_URL }}. --rrdatas=${{steps.create-ip-address.outputs.STATIC_IP_ADDRESS}} --type=A --ttl=60 --zone=${{ inputs.DNS_ZONE_NAME }}
          then
            echo "The DNS created"
          else
            echo "The DNS is already exist or failed to create."
            echo $PWD
          fi
        fi

    - id: deploy-helm
      shell: bash
      run: |
        name=$(echo $GITHUB_HEAD_REF | tr '[:upper:]' '[:lower:]' | cut -f2 -d/)-${{github.event.number}}-pr
        helm repo add helm-charts https://knawat.github.io/helm-charts
        echo "::set-output name=helm-output::$(helm upgrade $name helm-charts/moleculer \
          --install \
          -n "$name" \
          --create-namespace \
          --set container.name="${{ inputs.CONTAINER_NAME }}" \
          --set ingress.annotations."kubernetes\.io/ingress\.global-static-ip-name"="$name"  --set container.services="${{ inputs.SERVICES }}" \
          --set image.repository="${{ inputs.docker-registry }}/${{ inputs.GCP_PROJECT }}/${{ inputs.IMAGE_REPO_NAME }}" \
          --set image.tag="${{ inputs.IMAGE_TAGS	}}" \
          --set cron.enabled=${{ inputs.CRON_ENABLED	}} \
          --set environment.secret.AGENT_APIKEY=${{ inputs.AGENT_APIKEY }} \
          --set environment.secret.AGENT_TOKEN=${{ inputs.AGENT_TOKEN }} \
          --set environment.env.BASE_URL="pr-${{github.event.number}}.${{ inputs.BASE_URL }}" \
          --set environment.env.NAMESPACE="$name" \
          --set environment.env.TRANSPORTER=${{ inputs.TRANSPORTER	}} \
          --set environment.env.MOLECULER_APM_ENABLE=${{ inputs.MOLECULER_APM_ENABLE	}} \
          --set "${{ inputs.HELM_SET	}}" \
          --set ingress.hosts[0].host="pr-${{github.event.number}}.${{ inputs.BASE_URL }}" \
          --set ingress.hosts[0].paths[0].path="/*" \
          --set ingress.hosts[0].paths[0].backend.serviceName="api" \
          --set ingress.hosts[0].paths[0].backend.servicePort="80")

    - uses: mshick/add-pr-comment@v1
      env:
        GITHUB_TOKEN: ${{ input.GITHUB_TOKEN }}
      with:
        message: |
          ${{steps.deploy-helm.outputs.helm-output}}
        allow-repeats: true
branding:
  icon: 'anchor'  
  color: 'orange'